package polymorphism;

public interface Starcraft {
	
	// 오버라이딩을 위해 추가한 메소드
	// 실제론 호출하지 않는 메소드이므로 내용{}이 필요없습니다.
	// 이런 경우 abstract 메소드로 만듭니다.
	// 이 메소드는 abstract class 나 interface 에만 존재해야 합니다.
	// 상속받은 곳에서 반드시 overriding 해 주어야 합니다.
	public void attack();
	
	// abstract(추상) 메소드 
	// 하위 클래스에서 반드시 Overriding 해야한다. 내용이 없음 ( { } X )
	// 추상 클래스와 인터페이스에만 존재
	
	// final 
	// final 변수 : 값을 변경할 수 없음.
	// final 메소드 : 오버라이딩을 할 수 없음. 이러한 점에서 abstract 와 반대
	// final 클래스 : 상속할 수 없음.
	
	// * 상속하는 이유?
	// 1. 제공하는 클래스의 기능을 확장하기(extension : subclassing) 위해서
	// 2. 공통된 요소가 있을 때 하나로 묶어주기 위함
	// 3. 다형성(polymorphism : 동일한 코드가 상황에 따라 다른 작업을 수행)을 구현하기 위해서
	
	// interface( 메뉴판 )
	// 프로그램은 선언 부분과 구현부분을 분리하는 것이 좋습니다.
	// C언어는 헤더파일에 선언을 하고 .c 파일에 구현을 합니다.
	// C++언어는 .hpp 선언 .cpp 구현 ...
	// 구현을 담당하는 프로그래머를 제외하고는 실제 구현 내용을 볼 필요가 없습니다.
	// 나머지 사람들은 요구하는 기능이 있는지 없는지만 확인하면 됩니다.
	// 음식점에서 고객은 메뉴만 알면되지 음식의 설탕 함량 등.. 모든 것을 알 필요는 없습니다.
	// java 에서 인터페이스는 헤더파일처럼 이름만 가지고 있는 것입니다.
	// class 라는 단어 대신에 interface를 사용하고 interface 안에는 '추상 메소드'와 'final 변수'만 가질 수 있습니다.
	// (卽 abstract 를 붙이지 않아도 무조건 메소드는 추상메소드)
	// (卽 변수 앞에 final 을 붙이지 않아도 무조건 final)
	// 클래스가 인터페이스를 구현하고자 할 때 extends 대신에 implements(구현) 를 사용합니다.
	// 여러 개의 interface 를 implements 할 수 있습니다.
	// interface 안에 메소드는 전부 추상 메소드이므로 implements 하게 되면 반드시 모든 메소드들을 Overriding 해야 합니다.
	// interface 를 implements 하면 인터페이스의 메소드가 반드시 구현되어 있다고 보장할 수 있습니다.
	// 따라서 interface를 protocol(규칙, 약속 ) 으로 부르는 경우도 있습니다.
	// 단, 다른 클래스로부터 상속받는 경우 implements 는 extends 뒤에 와야 합니다.
	
	// 클래스들 사이의 관계 
	// 하나의 프로그램에 존재하는 모든 클래스들은 반드시 다른 클래스와 관계를 형성해야 합니다.
	// 이러한 관계에서는 2가지가 있습니다.
	// 1. 다른 클래스 안에서 사용되는 경우 : Embedded Object - has a 관계
	// 2. 다른 클래스와 상속 관계를 맺어서 사용되는 경우 : is a 관계 ex) 저그와 스타크래프트는 is a 관계다.
	
	// 예외처리 (Exception Handling)
	// 1. 용어 
	//		1) Error(오류) : 물리적인(문법적인) 오류 - 컴파일 시 체크해서 실행시키지 않습니다. 표시를 해줍니다.
	//						논리적인 오류 - 로직이 잘못되어 잘못된 결과가 나오는 것. 실행은 되는데 결과가 이상한 경우.
	//		2) Exception(예외) : 문법적인 오류는 아니어서 컴파일을 하고 실행까지는 하지만 실행중에 오류가 발생하여 프로그램이 '중단되는' 현상.
	//		3) Assertion(단언) : 문법적인 오류 나 예외가 아닌데 특정 조건을 만족하지 않으면 강제로 예외를 발생시켜서 프로그램을 '중단하는' 것
	//							운영체제 버전에 대한 제한이나 보안 이슈를 처리할 때 많이 사용합니다.
	// 2. 디버깅
	//		프로그램을 논리적인 오류나 예외 발생지점이나 이유를 찾기 위해서 프로그램을 부분적으로 실행시키는 행위
	// 		프로그래밍 언어를 공부하기 위해 IDE를 사용한다면 언어를 공부하기 전에 IDE를 설정하고 디버깅하는 방법을 익히는 것이 좋습니다.
	
	// Encoding : 문자를 메모리에 저장하기 위해 숫자 데이터로 저장하는 방법
	// A 65 B 66 ... 영어와 숫자는 ASCII 코드라는 방식으로 저장
	// 한글의 경우는 CP949(MS949), EUC-KR, UTF-8 3가지가 있습니다.
	// CP949는 Windows가 사용하는 방식, EUC-KR 는 이전 IE 가 사용하는 방식(웹에서만 사용),UTF-8은 전 세계 모든 문자를 동일하게 표현하기 위해 등장한 방식
	// 서로 다른 인코딩 방식으로 되어 있는 한글을 읽으면 한글이 깨집니다.

}
